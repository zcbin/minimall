wx:
  # appid	是	小程序唯一标识
  # secret	是	小程序的 app secret
  # js_code	是	登录时获取的 code
  # grant_type	是	填写为 authorization_code
  miniapp:
    appid: wx74afe1ecfc6446ca
    secret: 227a4a5734f93918493bd080b376862d
    grant_type: authorization_code

  # 对象存储配置
  storage:
    # 当前工作的对象存储模式，分别是local、aliyun、tencent、qiniu
    active: local
    # 本地对象存储配置信息
    local:
      storagePath: storage
      # 这个地方应该是wx模块的WxStorageController的fetch方法对应的地址
      address: http://localhost:8081/wx/storage/fetch/
    # 阿里云对象存储配置信息
    aliyun:
      endpoint: oss-cn-shenzhen.aliyuncs.com
      accessKeyId: 111111
      accessKeySecret: xxxxxx
      bucketName: litemall
    # 腾讯对象存储配置信息
    # 请参考 https://cloud.tencent.com/document/product/436/6249
    tencent:
      secretId: 111111
      secretKey: xxxxxx
      region: xxxxxx
      bucketName: litemall
    # 七牛云对象存储配置信息
    qiniu:
      endpoint: http://pd5cb6ulu.bkt.clouddn.com
      accessKey: 111111
      secretKey: xxxxxx
      bucketName: litemall

spring:
  # 邮件
  mail:
    host: smtp.qq.com
    port: 465
    username: 1432419543@qq.com
    password: **
    protocol: smtp
    test-connection: true
    default-encoding: UTF-8
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
      mail.smtp.starttls.required: true
      mail.smtp.ssl.enable: true
      mail.display.sendmail: minimall

  kafka:
    # 消费者
    consumer:
      # 指定默认消费者group id
      auto-offset-reset: earliest
      # 制定kafka代理地址
      bootstrap-servers: localhost:9092
      group-id: test_group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 自定义反序列化器
      value-deserializer: com.zcb.minimallcore.mq.JSONDeserializer
    # 生产者
    producer:
      bootstrap-servers: localhost:9092
      # 指定消息key和消息体的编解码方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 自定义序列化器
      value-serializer: com.zcb.minimallcore.mq.JSONSerializer
